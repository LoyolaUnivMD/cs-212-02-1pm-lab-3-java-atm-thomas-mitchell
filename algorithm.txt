1.When a user first accesses the ATM, the user should be asked for their name.
2.The initial balance for the user is $212.90
3. The ATM should greet the user by name with a greeting message, then ask the user what they would like to do.
4.
If a user selects deposit
The ATM should increase the user's balance by the provided amount
Otherwise, if a user selects withdraw
The ATM should reduce the balance by the users provided amount if and only if there are sufficients funds.
Otherwise, if the user selects check balance
The ATM should display the current balance
Otherwise, if the user selects leave
The ATM should ask if the user would like a receipt printed or emailed.
The ATM should display the total amount deposited/withdrawn and a thank you message.
The ATM should remind them to take the recipe or check their email depending on the option above.
If the user has not chosen to leave:
The ATM should return to the main menu and process starting from step 3.
EXTRA CREDIT: Proper error checking should be included:
The user should not be able to select invalid menu options.
The user should not be able to enter negative numbers for deposits or withdrawls.
The program should not crash if the user enters something that is not a number.

Name: intInput
Purpose: Makes sure the user inputs a valid int that is over 0 and is under a limit if useLimit is true
Parameters: boolean useLimit, int limit, String prompt
Return: valid int between 0 and limit
1. initialize num to 0 and valid to false
2. while not valid
    a. print prompt
    b. try
        i. num = input.nextInt()
        ii. if useLimit is true
            a. if num <= limit and num is greater than 0
                i. valid = true
            b. otherwise
                i. print "Invalid Choice"
        iii. otherwise
            a. if num > 0
                i. valid = true
            b. otherwise
                i. print "Invalid Choice"
    c. catch InputMismatchException e
        i. print "Invalid input"
        ii. input.next()
3. return num


Name: doubleInput
Purpose: Makes sure the user inputs a valid double that is over 0 and is under a limit if useLimit is true
Parameters: boolean useLimit, double limit, String prompt
Return: valid double between 0 and limit
1. initialize num to 0 and valid to false
2. while not valid
    a. print prompt
    b. try
        i. num = input.nextDouble()
        ii. if useLimit is true
            a. if num <= limit and num is greater than 0
                i. valid = true
            b. otherwise
                i. print "Invalid Choice"
        iii. otherwise
            a. if num > 0
                i. valid = true
            b. otherwise
                i. print "Invalid Choice"
    c. catch InputMismatchException e
        i. print "Invalid input"
        ii. input.next()
3. return num